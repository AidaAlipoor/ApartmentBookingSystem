# See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

# This stage is used when running from VS in fast mode (Default for Debug configuration)
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
USER $APP_UID
WORKDIR /app
EXPOSE 8080
EXPOSE 8081

# This stage is used to build the service project
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src

# Copy project files
COPY ["Book.API/Book.API.csproj", "Book.API/"]
COPY ["Book.Application/Book.Application.csproj", "Book.Application/"]
COPY ["Book.Domain/Book.Domain.csproj", "Book.Domain/"]
COPY ["Book.Infrastructure/Book.Infrastructure.csproj", "Book.Infrastructure/"]

# ✅ Fix: Add NuGet source to avoid restore errors
RUN dotnet nuget list source | grep -q "https://api.nuget.org/v3/index.json" || dotnet nuget add source https://api.nuget.org/v3/index.json

# Restore NuGet packages
RUN dotnet restore "./Book.API/Book.API.csproj"

# Copy everything
COPY . .

# Build the application
WORKDIR "/src/Book.API"
RUN dotnet build "./Book.API.csproj" -c $BUILD_CONFIGURATION -o /app/build

# Publish the application
FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./Book.API.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

# Final runtime image
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "Book.API.dll"]
